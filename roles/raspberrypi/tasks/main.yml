---
- name: Update package cache
  apt:
    update_cache: yes
    cache_valid_time: 3600

- name: Install required packages
  apt:
    name:
      - python3-pip
      - python3-dev
      - python3-venv
      - git
      - vim
      - htop
    state: present

- name: Configure SSH to allow password authentication initially
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^#?PasswordAuthentication'
    line: 'PasswordAuthentication yes'
    backup: yes
  notify: restart ssh

- name: Create Python virtual environment
  command: python3 -m venv /home/pi/pygame_env
  args:
    creates: /home/pi/pygame_env/bin/activate
  become_user: pi

- name: Set ownership of virtual environment
  file:
    path: /home/pi/pygame_env
    owner: pi
    group: pi
    recurse: yes

- name: Install Python packages in virtual environment
  pip:
    name:
      - pygame
      - numpy
      - pillow
    virtualenv: /home/pi/pygame_env
    virtualenv_command: python3 -m venv
  become_user: pi

- name: Copy boot configuration for dual HDMI
  template:
    src: config.txt.j2
    dest: /boot/firmware/config.txt
    backup: no
  notify: reboot required


- name: Disable WiFi service
  systemd:
    name: wpa_supplicant
    enabled: no
    state: stopped
  ignore_errors: yes

- name: Create pygame display script directory
  file:
    path: /home/pi/scripts
    state: directory
    owner: pi
    group: pi
    mode: '0755'

- name: Create framebuffer pygame script for HDMI 1
  copy:
    content: |
      #!/home/pi/pygame_env/bin/python3
      import pygame
      import os
      import sys
      import time
      
      def main():
          print("Starting pygame on HDMI 1 using framebuffer...")
          
          # Check available framebuffers
          import subprocess
          try:
              result = subprocess.run(['ls', '-la', '/dev/fb*'], capture_output=True, text=True)
              print("Available framebuffers:")
              print(result.stdout)
          except:
              print("Could not list framebuffers")
          
          # Disable audio
          os.environ['SDL_AUDIODRIVER'] = 'dummy'
          
          # Try framebuffer drivers
          framebuffers = ['/dev/fb1', '/dev/fb0']
          
          for fb in framebuffers:
              try:
                  print(f"Trying framebuffer {fb}...")
                  
                  # Set SDL to use specific framebuffer
                  os.environ['SDL_VIDEODRIVER'] = 'fbcon'
                  os.environ['SDL_FBDEV'] = fb
                  os.environ['SDL_NOMOUSE'] = '1'
                  
                  # Initialize pygame
                  pygame.mixer.pre_init(frequency=0, size=0, channels=0, buffer=0)
                  pygame.init()
                  
                  # Create display
                  screen = pygame.display.set_mode((1920, 1080), pygame.FULLSCREEN)
                  pygame.display.set_caption(f"HDMI Display - {fb}")
                  
                  print(f"Success! Using {fb}")
                  print(f"Screen size: {screen.get_width()}x{screen.get_height()}")
                  
                  clock = pygame.time.Clock()
                  running = True
                  frame_count = 0
                  
                  print("Display running. Press Ctrl+C to exit.")
                  
                  while running:
                      # Handle events
                      for event in pygame.event.get():
                          if event.type == pygame.QUIT:
                              running = False
                      
                      # Animated background
                      color_value = int((time.time() * 30) % 255)
                      screen.fill((color_value, 150, 255 - color_value))
                      
                      # Draw text
                      font = pygame.font.Font(None, 72)
                      text = font.render(f"HDMI Display - {fb}", True, (255, 255, 255))
                      text_rect = text.get_rect(center=(screen.get_width()//2, screen.get_height()//2 - 50))
                      screen.blit(text, text_rect)
                      
                      # Frame counter
                      frame_text = font.render(f"Frame: {frame_count}", True, (255, 255, 255))
                      frame_rect = frame_text.get_rect(center=(screen.get_width()//2, screen.get_height()//2 + 50))
                      screen.blit(frame_text, frame_rect)
                      
                      pygame.display.flip()
                      clock.tick(30)
                      frame_count += 1
                      
                      # Status update
                      if frame_count % 150 == 0:
                          print(f"Frame {frame_count} - {fb}")
                  
                  return  # Success, exit function
                  
              except Exception as e:
                  print(f"Failed with {fb}: {e}")
                  pygame.quit()
                  continue
          
          print("No working framebuffer found!")
          print("Make sure both HDMI cables are connected and reboot after config changes.")
      
      if __name__ == "__main__":
          try:
              main()
          except KeyboardInterrupt:
              print("\nExiting...")
          finally:
              pygame.quit()
    dest: /home/pi/scripts/hdmi_display.py
    owner: pi
    group: pi
    mode: '0755'

- name: Create simple run script
  copy:
    content: |
      #!/bin/bash
      echo "Running pygame on framebuffer..."
      cd /home/pi
      source pygame_env/bin/activate
      python3 scripts/hdmi_display.py
    dest: /home/pi/run_pygame.sh
    owner: pi
    group: pi
    mode: '0755'

