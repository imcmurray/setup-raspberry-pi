---
- name: Update package cache
  apt:
    update_cache: yes
    cache_valid_time: 3600

- name: Install required packages
  apt:
    name:
      - python3-pip
      - python3-dev
      - python3-venv
      - git
      - vim
      - htop
    state: present

- name: Configure SSH to allow password authentication initially
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^#?PasswordAuthentication'
    line: 'PasswordAuthentication yes'
    backup: yes
  notify: restart ssh

- name: Create Python virtual environment
  command: python3 -m venv /home/pi/pygame_env
  args:
    creates: /home/pi/pygame_env/bin/activate
  become_user: pi

- name: Set ownership of virtual environment
  file:
    path: /home/pi/pygame_env
    owner: pi
    group: pi
    recurse: yes

- name: Install Python packages in virtual environment
  pip:
    name:
      - pygame
      - numpy
      - pillow
    virtualenv: /home/pi/pygame_env
    virtualenv_command: python3 -m venv
  become_user: pi

- name: Copy boot configuration for dual HDMI
  template:
    src: config.txt.j2
    dest: /boot/firmware/config.txt
    backup: no
  notify: reboot required

- name: Disable WiFi service
  systemd:
    name: wpa_supplicant
    enabled: no
    state: stopped
  ignore_errors: yes

- name: Create pygame display script directory
  file:
    path: /home/pi/scripts
    state: directory
    owner: pi
    group: pi
    mode: '0755'

- name: Create sample pygame script for HDMI 1
  copy:
    content: |
      #!/home/pi/pygame_env/bin/python3
      import pygame
      import os
      import sys
      
      # Disable audio to avoid ALSA errors
      os.environ['SDL_AUDIODRIVER'] = 'dummy'
      
      # Use framebuffer for HDMI 1 (second display)
      os.environ['SDL_FBDEV'] = '/dev/fb1'
      os.environ['SDL_VIDEODRIVER'] = 'fbcon'
      os.environ['SDL_NOMOUSE'] = '1'
      
      # Initialize pygame with no audio
      pygame.mixer.pre_init(frequency=0, size=0, channels=0, buffer=0)
      pygame.init()
      
      # Initialize display first, then get info
      try:
          # Try to set a basic mode first
          screen = pygame.display.set_mode((1920, 1080), pygame.FULLSCREEN)
          pygame.display.set_caption("HDMI Port 2 Output")
          
          # Get actual display info after initialization
          info = pygame.display.Info()
          print(f"Display resolution: {info.current_w}x{info.current_h}")
          
          clock = pygame.time.Clock()
          running = True
          
          while running:
              for event in pygame.event.get():
                  if event.type == pygame.QUIT:
                      running = False
                  elif event.type == pygame.KEYDOWN:
                      if event.key == pygame.K_ESCAPE:
                          running = False
              
              # Fill screen with changing colors
              import time
              color_value = int((time.time() * 50) % 255)
              screen.fill((color_value, 100, 255 - color_value))
              
              # Draw some text
              font = pygame.font.Font(None, 74)
              text = font.render("HDMI Port 2 - Pygame Display", True, (255, 255, 255))
              text_rect = text.get_rect(center=(screen.get_width()//2, screen.get_height()//2))
              screen.blit(text, text_rect)
              
              pygame.display.flip()
              clock.tick(60)
          
      except pygame.error as e:
          print(f"Pygame error: {e}")
          print("Make sure you're running on the Pi with framebuffer access")
      except Exception as e:
          print(f"Error: {e}")
      finally:
          pygame.quit()
          sys.exit()
    dest: /home/pi/scripts/hdmi2_display.py
    owner: pi
    group: pi
    mode: '0755'

