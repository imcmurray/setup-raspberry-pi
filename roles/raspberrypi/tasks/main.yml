---
- name: Update package cache
  apt:
    update_cache: yes
    cache_valid_time: 3600

- name: Install required packages
  apt:
    name:
      - python3-pip
      - python3-dev
      - python3-venv
      - git
      - vim
      - htop
    state: present

- name: Configure SSH to allow password authentication initially
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^#?PasswordAuthentication'
    line: 'PasswordAuthentication yes'
    backup: yes
  notify: restart ssh

- name: Create Python virtual environment
  command: python3 -m venv /home/pi/pygame_env
  args:
    creates: /home/pi/pygame_env/bin/activate
  become_user: pi

- name: Set ownership of virtual environment
  file:
    path: /home/pi/pygame_env
    owner: pi
    group: pi
    recurse: yes

- name: Install Python packages in virtual environment
  pip:
    name:
      - pygame
      - numpy
      - pillow
    virtualenv: /home/pi/pygame_env
    virtualenv_command: python3 -m venv
  become_user: pi

- name: Copy boot configuration for dual HDMI
  template:
    src: config.txt.j2
    dest: /boot/firmware/config.txt
    backup: no
  notify: reboot required

- name: Add framebuffer console to kernel command line
  lineinfile:
    path: /boot/firmware/cmdline.txt
    regexp: '^(.*?)(\s*fbcon=.*?)?\s*$'
    line: '\1 fbcon=map:1'
    backrefs: yes
  ignore_errors: yes

- name: Disable WiFi service
  systemd:
    name: wpa_supplicant
    enabled: no
    state: stopped
  ignore_errors: yes

- name: Create pygame display script directory
  file:
    path: /home/pi/scripts
    state: directory
    owner: pi
    group: pi
    mode: '0755'

- name: Create sample pygame script for HDMI 1
  copy:
    content: |
      #!/home/pi/pygame_env/bin/python3
      import pygame
      import os
      import sys
      
      def setup_display():
          """Setup display targeting the second HDMI port"""
          print("Setting up display for second HDMI port...")
          
          # List all available displays
          import subprocess
          try:
              # Check for DRM displays (modern approach)
              result = subprocess.run(['ls', '-la', '/dev/dri/'], capture_output=True, text=True)
              print("Available DRM devices:")
              print(result.stdout)
          except:
              print("No DRM devices found")
          
          try:
              # Check framebuffers
              result = subprocess.run(['ls', '-la', '/dev/fb*'], capture_output=True, text=True)
              print("Available framebuffers:")
              print(result.stdout)
              has_fb = '/dev/fb' in result.stdout
          except:
              has_fb = False
              print("No framebuffer devices found")
          
          # Try different approaches to target second display
          approaches = [
              # Try KMS (Kernel Mode Setting) - modern approach
              ('kmsdrm', {'SDL_VIDEODRIVER': 'kmsdrm'}),
              # Try direct framebuffer access
              ('fbcon_fb1', {'SDL_VIDEODRIVER': 'fbcon', 'SDL_FBDEV': '/dev/fb1'}) if has_fb else None,
              ('fbcon_fb0', {'SDL_VIDEODRIVER': 'fbcon', 'SDL_FBDEV': '/dev/fb0'}) if has_fb else None,
              # Try X11 targeting specific display
              ('x11_display1', {'SDL_VIDEODRIVER': 'x11', 'DISPLAY': ':0.1'}),
              # Fallback to dummy
              ('dummy', {'SDL_VIDEODRIVER': 'dummy'}),
          ]
          
          # Filter out None entries
          approaches = [a for a in approaches if a is not None]
          
          for name, env_vars in approaches:
              try:
                  print(f"Trying {name} approach...")
                  
                  # Reset SDL environment
                  for env_var in ['SDL_VIDEODRIVER', 'SDL_FBDEV', 'DISPLAY']:
                      if env_var in os.environ:
                          del os.environ[env_var]
                  
                  # Set new environment
                  for key, value in env_vars.items():
                      os.environ[key] = value
                  
                  # Common SDL settings
                  os.environ['SDL_NOMOUSE'] = '1'
                  os.environ['SDL_NOKEYBOARD'] = '1'
                  
                  # Reinitialize pygame
                  pygame.quit()
                  pygame.init()
                  
                  # Try to create display
                  screen = pygame.display.set_mode((1920, 1080), pygame.FULLSCREEN)
                  print(f"Successfully using {name}!")
                  return screen, name
                  
              except Exception as e:
                  print(f"Failed with {name}: {e}")
                  continue
          
          raise Exception("No working display approach found")
      
      def main():
          # Disable audio to avoid ALSA errors
          os.environ['SDL_AUDIODRIVER'] = 'dummy'
          
          # Initialize pygame with no audio
          pygame.mixer.pre_init(frequency=0, size=0, channels=0, buffer=0)
          
          try:
              screen, driver = setup_display()
              pygame.display.set_caption("HDMI Port 2 Output")
              
              # Get actual display info after initialization
              info = pygame.display.Info()
              print(f"Display resolution: {info.current_w}x{info.current_h}")
              print(f"Screen size: {screen.get_width()}x{screen.get_height()}")
              print(f"Using driver: {driver}")
              
              clock = pygame.time.Clock()
              running = True
              frame_count = 0
              
              print("Starting display loop. Press Ctrl+C to exit.")
              
              while running:
                  for event in pygame.event.get():
                      if event.type == pygame.QUIT:
                          running = False
                      elif event.type == pygame.KEYDOWN:
                          if event.key == pygame.K_ESCAPE:
                              running = False
                  
                  # Fill screen with changing colors
                  import time
                  color_value = int((time.time() * 50) % 255)
                  screen.fill((color_value, 100, 255 - color_value))
                  
                  # Draw some text
                  font = pygame.font.Font(None, 74)
                  text = font.render(f"HDMI Port 2 - Frame {frame_count}", True, (255, 255, 255))
                  text_rect = text.get_rect(center=(screen.get_width()//2, screen.get_height()//2))
                  screen.blit(text, text_rect)
                  
                  pygame.display.flip()
                  clock.tick(60)
                  frame_count += 1
                  
                  # Print status every 5 seconds
                  if frame_count % 300 == 0:
                      print(f"Running... Frame {frame_count}")
              
          except KeyboardInterrupt:
              print("\nInterrupted by user")
          except pygame.error as e:
              print(f"Pygame error: {e}")
              print(f"Current user: {os.getuid()}")
              print("Try running as root: sudo python3 scripts/hdmi2_display.py")
          except Exception as e:
              print(f"Error: {e}")
              import traceback
              traceback.print_exc()
          finally:
              pygame.quit()
              sys.exit()
      
      if __name__ == "__main__":
          main()
    dest: /home/pi/scripts/hdmi2_display.py
    owner: pi
    group: pi
    mode: '0755'

